name: ADS Website Backend Deployment to AWS EC2

on:
  pull_request:
    types:
      - closed # Trigger when a PR is closed
    branches:
      - main # Only for the main branch
      - master # Also for the master branch
      - development # Also for the development branch
  workflow_dispatch: # Allow manual triggering of the workflow

env:
  IMAGE_TAG: latest

jobs:
  build-push:
    if: github.event.pull_request.merged == true && (contains(github.event.pull_request.title, 'codingcad-deploy-dev') || contains(github.event.pull_request.title, 'codingcad-deploy-prod'))
    name: 🌏 Build & Push
    runs-on: ubuntu-latest

    # 🔐 This line ensures access to the production environment secrets
    environment: development

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🔑 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🏗️ Build Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker tag ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

      - name: 📤 Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

  deploy-dev:
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.title, 'codingcad-deploy-dev')
    name: 👨🏻‍💻 Deploy Dev
    runs-on: ubuntu-latest
    needs:
      - build-push

    # 🔐 This line ensures access to the production environment secrets
    environment: development

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🗝️ Setup SSH Key for EC2 Access
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: 🚀 Deploy on EC2 Instance
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            
            sudo usermod -aG docker ubuntu
            newgrp docker
            
            echo "-------------------------------------"
            echo "Waiting for Docker cache cleaning..."
            echo "-------------------------------------"

            # Stop and remove all running containers
            sudo docker ps -aq | xargs -r docker stop
            sudo docker ps -aq | xargs -r docker rm -f

            # Remove all images
            sudo docker images -aq | xargs -r docker rmi -f

            # Remove build cache
            sudo docker builder prune -af

            echo "--------------------"
            echo "Docker cache removed"
            echo "--------------------"

            echo "--------------------"
            echo "Docker Login to ECR"
            echo "--------------------"

            sudo docker login -u AWS -p \$(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) ${{ secrets.ECR_REGISTRY }}

            echo "--------------------"
            echo "Docker Pulling Image"
            echo "--------------------"

            sudo docker pull ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

            echo "-------------------------"
            echo "Docker Starting Container"
            echo "-------------------------"
            # sudo docker stop ads-backend || true
            # sudo docker rm ads-backend || true
            sudo docker run -d --restart always --name ads-backend -p 4000:4000 ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

            echo "------------------------"
            echo "Docker Container Running"
            echo "------------------------"

          EOF

# -----------------------------------------------------------------------------
# |                          Configurations and Secrets                       |
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Secrets Configuration                                                       |
# -----------------------------------------------------------------------------
# To use this workflow, you need to set up the following secrets in your GitHub

# SonarQube Server secrets:
# AWS IAM User secrets:
# AWS IAM Role policies:
# Deploying EC2 instance secrets:

# export ECR_REGISTRY=aws_account_id.dkr.ecr.region.amazonaws.com
# export ECR_REPO=your-repository-name
# export IMAGE_TAG=your-tag

# -----------------------------------------------------------------------------
# Secret Key            | Description                                         |
# -----------------------------------------------------------------------------
# AWS_ACCESS_KEY_ID     | Your AWS access key                                 |
# AWS_SECRET_ACCESS_KEY | Your AWS secret key                                 |
# AWS_REGION            | e.g. us-east-1                                      |
# ECR_REPOSITORY        | e.g. node-backend                                   |
# ECR_REGISTRY          | e.g. 123456789012.dkr.ecr.us-east-1.amazonaws.com   |
# EC2_HOST              | EC2 Public IP or DNS                                |
# EC2_USER              | SSH username (e.g., ec2-user)                       |
# EC2_SSH_KEY           | Base64-encoded private SSH key                      |
# HOST_URL              | SonarQube server URL                                |
# PROJECT_KEY           | SonarQube project key                               |
# SONAR_TOKEN           | SonarQube authentication token                      |
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# AWS IAM User Permissions
# -----------------------------------------------------------------------------

# 1. AmazonEC2FullAccess
#    - Required to interact with EC2 instances (e.g., SSH access, managing instances).

# 2. AmazonEC2ContainerRegistryFullAccess
#    - Required to create, manage, and push Docker images to Amazon Elastic Container Registry (ECR).

# 3. SecretsManagerReadWrite (or specific permissions for secrets)
#    - Required to retrieve secrets from AWS Secrets Manager for use in the container.

# 4. CloudWatchLogsFullAccess (Optional)
#    - Recommended for logging and monitoring purposes.

# -----------------------------------------------------------------------------
# I am role policies
# -----------------------------------------------------------------------------
# 1. AmazonEC2ContainerRegistryPowerUse
# 2. AmazonElasticContainerRegistryPublicReadOnly
# 3. SecretsManagerReadWrite

# -----------------------------------------------------------------------------
# Pre requisites
# -----------------------------------------------------------------------------

# - EC2 instance should have an IAM role with permissions to access ECR
# - EC2 instance should have Docker installed and running
# - Ensure the security group of the EC2 instance allows inbound traffic on port 4000
